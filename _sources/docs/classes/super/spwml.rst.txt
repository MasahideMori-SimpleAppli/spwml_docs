:orphan:
.. _spwml:

======================================
SpWMLElement
======================================

How to write by SpWML
========================

It is a super class that cannot be described directly.

----

Summary
===============

Superclass of all SpWML elements.

----

Functions (Dart)
===================

Call from Builder
----------------------

There is a method called getElementByID in the function of SpWMLBuilder, you can get the element by using this.

.. code-block:: none
   
    SpWMLBuilder builder = SpWMLBuilder("(text, id:1)abcde");
    TextElement text = builder.getElementByID(1) as TextElement;


Call from Builder 2
----------------------

There is a method called getElementBySID in the function of SpWMLBuilder, you can get the element by using this.

.. code-block:: none
   
    SpWMLBuilder builder = SpWMLBuilder("(text, sid:aaa)abcde");
    TextElement text = builder.getElementBySID("aaa") as TextElement;


Set visibility flag
----------------------

If isGone set true, remove this element in build result.

.. code-block:: none
   
    void setIsGone(bool isGone)


Background color setting
--------------------------

Sets the background color. Calling this will automatically update the box decoration as well.

.. code-block:: none
   
    void setBGColor(Color c)


----

Variable（Dart）
=================

* [serial] : Internal array number.
* [type] : The type of SpWML.
* [param] : parameters converted for Flutter after being parsed by SpBML.
* [spwmlParams] : Parameters written by the user in SpWML.
* [parentSerial] : Seial of Parent block.
* [lineStart] : Start line number of this block.
* [lineEnd] : End line number of this block.
* [style] : Font style reference given to the builder etc.

----

Parameters
====================

* id(int). ID specified by int. Used for specifying button callbacks and replacing child blocks.
* sid(String). String ID specified by int. Used for specifying button callbacks and replacing child blocks.
* text(String). The text content written within the block. In a text element, this content is displayed on the screen.
* h(double). It can also be written as height, which is the height of this element specified in px. Specify Infinity to maximize to the same width as the parent element.
* w(double). It can also be written as width, which is the width of this element specified in px. Specify Infinity to maximize to the same width as the parent element.
* wt(double). It can also be written as weight, The ratio of this element on the screen.If no other element has a ratio, the element with this will occupy the rest of the width.
* minH (double). It can also be written as minHeight, It is the minimum height specified in px. Ignored depending on the conditions.
* minW (double). It can also be written as minWidth, It is the minimum width specified in px. Ignored depending on the conditions.
* maxH (double). It can also be written as maxHeight, It is the maximum height specified in px. Ignored depending on the conditions.
* maxW (double). It can also be written as maxWidth, It is the maximum width specified in px. Ignored depending on the conditions.
* mL (double). It can also be written as mLeft, which is the left margin specified in px.
* mT (double). It can also be written as mTop, which is the top margin specified in px.
* mR (double). It can also be written as mRight, which is the right margin specified in px.
* mB (double). It can also be written as mBottom, which is the bottom margin specified in px.
* mAll (double). Batch specification of margin in px. When used together with individual specifications such as mL, the individual side takes precedence.
* pL (double). It can also be written as pLeft, which is the left padding specified in px.
* pT (double). It can also be written as pTop, which is the top padding specified by px.
* pR (double). It can also be written as pRight, which is the right padding specified in px.
* pB (double). It can also be written as pBottom, which is the bottom padding specified in px.
* pAll (double). Batch specification of padding in px. When used together with individual specifications such as pL, the individual side takes precedence.
* shiftX (double). Shift the relative position of the element on the x-axis.
* shiftY (double). Shift the relative position of the element on the y-axis.
* elevation (double). Shifts the relative position of the element on the z-axis.
* bgColor (String). Background Color setting. :ref:`The color system<color_system>` .
* borderColor (String). Border color setting. :ref:`The color system<color_system>` .
* borderWidth (double). The width of the border line specified in px.
* borderRadius (double). Radius of border specified in px.
* borderShape (String).The shape of the border.Specify a rectangle or circle. Invalid for btn, card, radioBtn, checkbox, table, tableRow.
* rTL (double). Amount of rounding of the upper left border specified in px.
* rTR (double). The amount of rounding of the upper right border specified in px.
* rBL (double). The amount of rounding of the lower left border specified in px.
* rBR (double). The amount of rounding of the bottom right border specified in px.
* ellipticalX (double). The amount of rounding in the x-axis direction specified by px.Both ellipticalX and ellipticalY must be set at the same time.
* ellipticalY (double). The amount of rounding in the y-axis direction specified in px.Both ellipticalX and ellipticalY must be set at the same time.
* isGone (bool)。If true, hides this block. The initial value is false.

----

Parent class
===============

`StatelessWidget(Flutterのclassです) <https://api.flutter.dev/flutter/widgets/StatelessWidget-class.html>`__ 