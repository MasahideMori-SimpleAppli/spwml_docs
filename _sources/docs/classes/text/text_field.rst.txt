:orphan:

.. _textField:

======================================
textfield
======================================

How to write by SpWML
========================

.. code-block:: none

   (tf, w:380, labelText:Abbreviation, sid:tf1)
   (tf, w:380, labelText:search, mode:search, sid:tf2)
   (tf, w:380, labelText:search, mode:searchPrefix, sid:tf3)
   (tf, w:380, labelText:search\ with\ clear, mode:searchAndClear, sid:tf4)
   (tf, w:380, labelText:input\ password, mode:password, sid:tf5)
   (tf, w:380, labelText:rounded\ type, type:rounded, sid:tf6)
   (tf, w:380, labelText:integer\ only, inputType:intOnly, mT:12, sid:tf7)
   (tf, w:380, labelText:integer\ only\,\ negative\ num\ allowed, inputType:intOnlyAllowNegative, mT:12, sid:tf8)
   (tf, w:380, labelText:Only\ numbers\ with\ decimal\ points, inputType:numOnly, mT:12, sid:tf9)
   (tf, w:380, labelText:Only\ numbers\ with\ decimal\ points\,\ negative\ num\ allowed, inputType:numOnlyAllowNegative, mT:12, sid:tf10)
   (tf, w:380, labelText:money, inputType:money, mT:12, sid:tf11)
   (tf, w:380, labelText:money\,\ negative\ num\ allowed, inputType:moneyAllowNegative, mT:12, sid:tf12)
   (tf, w:380, labelText:money\ with\ decimal, inputType:moneyWithDecimal, mT:12, sid:tf13)
   (tf, w:380, labelText:money\ with\ decimal\,\ negative\ num\ allowed, inputType:moneyWithDecimalAllowNegative, mT:12, sid:tf14)
   (tf, w:380, labelText:Integer\ only\,\ Maximum\ value\ is\ valid, inputType:intOnly, max:255, mT:12, sid:tf15)

----

Summary
===============

It is a block that can be set to text input without a child block.

It has a variable with parameters equivalent to Flutter `TextField class <https://api.flutter.dev/flutter/material/TextField-class.html>`__ .

To use this type, it is necessary to set `TextFieldManager <https://pub.dev/packages/simple_managers>`__  to SpWMLBuilder or SpWML widget.

----

Dart Class Reference
======================
`TextFieldElement class <https://pub.dev/documentation/simple_widget_markup/latest/simple_widget_markup/TextFieldElement-class.html>`__

----

SpWML Parameters
======================

* :ref:`The common<spwml>` parameters.
* :ref:`Parent<text>` parameters. However, isSelectable is invalid.
* labelText(String). Hint text with the function of moving to the upper left with animation.
* hint(String). This is the hint text that is displayed when the input is empty.
* type(String). Specifies the shape of the input box.Specify either material or rounded.
* mode(String). Specifies the operation mode. Specify one of normal, noSuggestAndAutofill, password, passwordPrefix, search, searchPrefix, searchAndClear, manual. In manual mode, SpWML specification is invalid and the user setting value is reflected as it is.
* iconNum(String). Set the icon type with `codePoint <https://api.flutter.dev/flutter/material/Icons-class.html>`__ .
* iconSize (double).
* iconColor (String). Color setting for icons.  :ref:`The color system<color_system>` .
* suffixIconNum(String). Suffix Set the icon type with `codePoint <https://api.flutter.dev/flutter/material/Icons-class.html>`__ .
* suffixIconSize(double). Suffix Set size of icon in px.
* suffixIconSplashRadius(double). Specifies the size of the animation area for tapping the tail icon in px.
* suffixIconColor(String). Color setting for the suffix icon.  :ref:`The color system<color_system>` .
* cpL (double). Left content padding.
* cpT (double). Top content padding.
* cpR (double). Right content padding.
* cpB (double). Bottom content padding.
* maxLines(int?). Sets how many lines of text the text field will look like. This does not limit the actual number of input lines. However, if set to 1, line breaks are not allowed.
* maxLength(int?). Maximum number of input characters for text.
* fillColor(String?). Fill color when type is rounded.
* radius(double). The corner rounding when type is rounded.
* isEnabled(bool). Flag for enable/disable.
* readOnly(bool). Flag to enable read-only mode.
* keyboardType(String). Specifies the type of software keyboard used for input, which is mainly useful on mobile devices. This is the equivalent of Flutter's `TextInputType <https://api.flutter.dev/flutter/services/TextInputType-class.html>`__.
* inputType(String). Adjusts the text input. Choose between normal, intOnly, intOnlyAllowNegative, numOnly, numOnlyAllowNegative, money, moneyAllowNegative, moneyWithDecimal and moneyWithDecimalAllowNegative. Default is normal.
* min(double). This is only valid if inputType is a numeric input. Sets the minimum value. This is an input limitation, so only 0 and negative values are recommended.
* max(double). This is only valid if inputType is a numeric input. Sets the maximum value.